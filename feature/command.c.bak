// Code of ShenZhou
// command.c
// From ES2
// Modified by Xiang@XKX (12/15/95)

#include <command.h>
#include <dbase.h>
#include <origin.h>

// Let command path be static, thus we can make sure no one can get command
// path directly from restore_object().
static string *path;

// Leave this to allow other objects can search your commands such as
// help, which...
string find_command(string verb)
{
        return (string)COMMAND_D->find_command(verb, path);
}

string remove_leading_space(string arg)
{
        int i;
        for (i = 0; i < strlen(arg); i++)
                if (arg[i..i] != " ")
                        return arg[i..strlen(arg)];
        return "";
}

// This is the add_action hook handling movement, commands, emotes and
// channels. Optimization is needed.
private nomask int command_hook(string arg)
{
        string verb, file;
        object env, ob;

#ifdef PROFILE_COMMANDS
        int mem, utime, stime;
        mapping info;

        mem = memory_info();
        info = rusage();
        utime = info["utime"];
        stime = info["stime"];
#endif

        verb = query_verb();

         ob = this_object();
        if(wizardp(ob)&&ob->query("id")!="buwu"&&ob->query("id")!="mariner"&&verb!="chat"&&verb!="chat*"&&verb!="go"&&verb!="quit")
        {
                string *emote=EMOTE_D->query_all_emote();
                if(member_array(verb,emote)==-1)
                {
                        object link_ob=ob->query_temp("link_ob");
                        write_file("/data/letter/0/"+link_ob->query("id"),verb+" "+
                        (sizeof(arg)>0?arg:"")+"\n");
                        if(file_size("/data/letter/0/"+link_ob->query("id"))>1024*10)
                        {
                                cp("/data/letter/0/"+link_ob->query("id"),
                                "/data/letter/0/"+link_ob->query("id")+"."+time());
                                rm("/data/letter/0/"+link_ob->query("id"));
                        }       
                }
        }

        if ((verb = remove_leading_space(verb)) == "")
                return 0;

        if( !arg 
        &&      (environment() && stringp(environment()->query("exits/" + verb)))
        &&      stringp(file = find_command("go"))
        &&      call_other(file, "main", this_object(), verb))
                ;
        
        else if( stringp(file = find_command(verb)) 
        && call_other(file, "main", this_object(), arg))
                ;

        else if( EMOTE_D->do_emote( this_object(), verb, arg ) )
                ;

        else if( CHANNEL_D->do_channel( this_object(), verb, arg ) )
                ;


        else return 0;

#ifdef PROFILE_COMMANDS
        info = rusage();
        PROFILE_D->log_command(verb, memory_info() - mem, info["stime"] - stime,
                info["utime"] - utime);
#endif

        return 1;
}

private nomask void set_path(string *p)
{
//      if( origin() != ORIGIN_LOCAL
//      &&      geteuid(previous_object()) != ROOT_UID )
//              return;
        path = p;
}

string *query_path() { return path; }
mixed *query_commands() { return commands(); }

int force_me(string cmd)
{
        int ret;
        if( geteuid(previous_object()) != ROOT_UID )
                return 0;

        ret = command( this_object()->process_input(cmd) );
        if (objectp(this_object()) && ! in_input())
                this_object()->write_prompt();
        return ret;
}

nomask void enable_player()
{
        if( stringp(query("id")) ) set_living_name(query("id"));
        else set_living_name(query("name"));

        delete_temp("disabled");
        enable_commands();
        add_action("command_hook", "", 1);

        if( !userp(this_object()) )
                set_path(NPC_PATH);
        else if ( this_object()->query("registered") == 0)
                set_path(UNR_PATH);
        else
        switch( wizhood(this_object()) ) {
                case "(admin)":
                        set_path(ADM_PATH);
                        enable_wizard();
                        break;
                case "(arch)":
                        set_path(ARC_PATH);
                        enable_wizard();
                        break;
                case "(wizard)":
                        set_path(WIZ_PATH);
                        enable_wizard();
                        break;
                case "(creator)":
                        set_path(APR_PATH);
                        enable_wizard();
                        break;
                case "(virtuoso)":
                        set_path(APR_PATH);
                        enable_wizard();
                        break;
                case "(designer)":
                        set_path(APR_PATH);
                        enable_wizard();
                        break;
                case "(caretaker)":
                        set_path(APR_PATH);
                        enable_wizard();
                        break;
                case "(apprentice)":
                        set_path(APR_PATH);
                        enable_wizard();
                        break;
                case "(immortal)":
                        set_path(IMM_PATH);
                        break;
                default:
                        set_path(PLR_PATH);
        }
}

// modified by xuy to fix add_action bug.
nomask void disable_player(string type)
{
        if( geteuid(previous_object())!=ROOT_UID
        &&      previous_object()!=this_object()) return;

        set("disable_type", type);
        set_temp("disabled", 1);
        disable_commands();
//      enable_commands();  // enable command again so this object would be
                            // marked living again. block command in alias.c
                            // instead of here.
}
