// Code of ShenZhou
// bboard.c

#include ansi.h

#define BOARD_CAPACITY query("capacity")

inherit ITEM;
inherit F_SAVE;

void tune_channels();
void open_channels();
string set_color(string msg){;        msg = replace_string(msg, "$BLK$", BLK);;        msg = replace_string(msg, "$RED$", RED);;        msg = replace_string(msg, "$GRN$", GRN);;        msg = replace_string(msg, "$YEL$", YEL);;        msg = replace_string(msg, "$BLU$", BLU);;        msg = replace_string(msg, "$MAG$", MAG);;        msg = replace_string(msg, "$CYN$", CYN);;        msg = replace_string(msg, "$WHT$", WHT);;        msg = replace_string(msg, "$HIR$", HIR);;        msg = replace_string(msg, "$HIG$", HIG);;        msg = replace_string(msg, "$HIY$", HIY);;        msg = replace_string(msg, "$HIB$", HIB);;        msg = replace_string(msg, "$HIM$", HIM);;        msg = replace_string(msg, "$HIC$", HIC);;        msg = replace_string(msg, "$HIW$", HIW);;        msg = replace_string(msg, "$NOR$", NOR);;	return msg;;}
void setup()
{;        string loc;;                ;        if( stringp(loc = query("location")) );                move(loc);;        set("no_get", 1);;        restore();;}

void init()
{;        add_action("do_post", "post");;        add_action("do_read", "read");;        add_action("do_discard", "discard");;        add_action("do_store", "store");;        add_action("do_list","list");;}

string query_save_file()
{;        string id;;;        if( !stringp(id = query("board_id")) ) return 0;;        return DATA_DIR + "board/" + id;;}

string short()
{;        mapping *notes;;        int i, unread, last_read_time;;;        notes = query("notes");;        if( !pointerp(notes) || !sizeof(notes) );                return ::short() + " [ 没有任何留言 ]";;;        if( this_player() ) {;                last_read_time = (int)this_player()->query("board_last_read/" + (string)query("board_id"));;                for(unread = 0, i=sizeof(notes)-1; i>=0; i--, unread ++);                        if( notesitime <= last_read_time ) break;;        };        if( unread );                return sprintf("%s [ %d 张留言，%d 张未读 ]", ::short(), sizeof(notes), unread);;        else;                return sprintf("%s [ %d 张留言 ]", ::short(), sizeof(notes));;}

string long()
{;        mapping *notes;;        int i, last_time_read;;        string msg, myid;;;        notes = query("notes");;        msg = query("long");;        msg = msg + query("name") +"的使用方法请见 help board。\n";;        return msg;;}

int do_list()
{;        mapping *notes;;        int i, last_time_read;;        string msg, myid;;;        notes = query("notes");;        msg = query("long");;;        if( !pointerp(notes) || !sizeof(notes) ) ;                return notify_fail(msg+query("name")+"上目前没有任何留言。\n");;        msg += query("name")+"上现有下列留言：\n────────────────────────\n";;        last_time_read = this_player()->query("board_last_read/" + (string)query("board_id"));;        for(i=0; i<sizeof(notes); i++);                msg += sprintf("%s[%2d]" NOR "  %-40s %12s (%s)\n",;                        ( notesitime > last_time_read ? HIY: ""),;                        i+1, notesititle, notesiauthor, ctime(notesitime) );;        this_player()->start_more( msg );;        return 1;;;}

// This is the callback function to process the string returned from the
// editor defined in F_EDIT of player object.
void done_post(object me, mapping note, string text)
{;        mapping *notes;;;        notemsg = set_color(text);;        notetime = time();;        notes = query("notes");;        if( !pointerp(notes) || !sizeof(notes) );                notes = ({ note });;        else;                notes += ({ note });;;        // Truncate the notes if maximum capacity exceeded.;        if( sizeof(notes) > BOARD_CAPACITY );                notes = notes0 .. BOARD_CAPACITY;;;        set("notes", notes);;        tell_object(me, "留言完毕。\n");;;        open_channels();;        save();;        return;;}

int do_post(string arg)
{;        int i, j=0;;        mapping note;;        string poster_lvl, family;;        object the_player;;        mapping fam;;;        the_player = this_player();     ;        poster_lvl = query("poster_level");;        ;        if(!stringp(poster_lvl));                poster_lvl = "(player)";;;        for(i=0; i<sizeof(query("notes")); i++){;                if (the_player->name()+"("+the_player->query("id")+")" == query("notes")iauthor) ;                j++;};;//        if(j>=10 && !wizardp(the_player)) return notify_fail("对不起，你的留言已超过十篇，请删掉前面的再POST新的。\n");^M;;//      write("Board Restricted to " + poster_lvl + " and above.\n");;;        if ( (int)SECURITY_D->cmp_wiz_level(the_player, poster_lvl ) < 0 );                return notify_fail("本板不接受你的投稿。\n");;;        family = query("poster_family");;        fam = the_player->query("family");;;//      write("Board Restricted to " + family + " players only.\n");;;        if ( stringp(family);                && (int)SECURITY_D->cmp_wiz_level(the_player, "(immortal)" ) < 0;                && ( !mapp( fam ) || famfamily_name != family ) );                return notify_fail("非本派弟子不得向本板乱涂乱写。\n");;;        if(!arg) return notify_fail("留言请指定一个标题。\n");;        ;        note = allocate_mapping(4);;        notetitle = set_color(arg);;        noteauthor = the_player->name()+"("+the_player->query("id")+")";;        tune_channels();;        the_player->edit( (: done_post, the_player, note :) );;        return 1;;}

int do_read(string arg)
ify_fail("没有这张留言。\n");;        num--;;        tune_channels();;        the_player->start_more( sprintf(;"[%d] %-40s %s(%s)\n----------------------------------------------------------------------\n",;                num + 1, notesnumtitle, notesnumauthor, ctime(notesnumtime));                + notesnummsg );;        open_channels();;        ;        // Keep track which post we were reading last time.;        if( !mapp(last_read_time) );                the_player->set("board_last_read", (myid: notesnumtime) );;        else ;                if( undefinedp(last_read_timemyid) || notesnumtime > last_read_timemyid );                        last_read_timemyid = notesnumtime;;;        return 1;;}


int do_discard(string arg)
{;        mapping *notes;;        int num;;;        if( !arg || sscanf(arg, "%d", num)!=1 );                return notify_fail("指令格式：discard <留言编号>\n");;        notes = query("notes");;        if( !arrayp(notes) || num  1 || num  sizeof(notes) );                return notify_fail("没有这张留言。\n");;        num--;;        if( notesnumauthor != (string)this_player(1)->name()+"("+this_player(1)->query("id")+")";        &&  ( (int)SECURITY_D->cmp_wiz_level(this_player(), "(caretaker)") < 0 ) );                return notify_fail("这个留言不是你写的。\n");;;        notes = notes + notes;;        set("notes", notes);;        save();;        write("删除第 " + (num+1) + " 号留言....Ok。\n");;        return 1;;}

void tune_channels()
{;        string *tuned_ch;;        object me;;        ;        me = this_player();;        ;        tuned_ch = me->query("channels");;        me->set_temp("tuned_ch", tuned_ch);;        me->set("channels", 0);;}

void open_channels()
{;        string *tuned_ch;;        object me;;        ;        me = this_player();;                       ;        tuned_ch = me->query_temp("tuned_ch");;        me->set("channels", tuned_ch);;        me->set_temp("tuned_ch", 0);;}                             

int do_store(string arg)
, "※※※※※※※※※※※※※※【“神州”文选】"+;                "※※※※※※※※※※※※※※", filename);;        EDITOR_D->add(arc, sprintf("□%03d  %-40s  %12s(%s)",;                numb, notesnumtitle,;                notesnumauthor,;                ctime(notesnumtime)), filename );;        EDITOR_D->add(arc, notesnummsg, filename);;        EDITOR_D->add(arc, "□本篇完□", filename);;;/* index */;        filename = sprintf("%s/wenxuan.%s", fyear, fmonth);     ;;        if (arc);        write( "ARC: writing ..." + filename + "\n" );;        else;        write( "WEN: writing ..." + filename + "\n" );;;        if ( numb == 1);        {;EDITOR_D->add(arc,;"※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※\n" +;"                    【神州文选" + fyear +"年第 " + fmonth + " 卷目录】\n" +;"编号   题目                                              作者(发稿日期)\n"+;"※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※",;        filename);;        };;        if (EDITOR_D->add(arc, sprintf("□%03d  %-40s  %12s(%s)",;                numb, notesnumtitle,;                notesnumauthor,;                ctime(notesnumtime)), filename )) {;                write( notesnumstored = sprintf("【“神州”文选】第 %d 篇收入 %s 卷，第 %03d 篇。\n",;                        num+1, fmonth, numb) );;                log_file("wenxuan",sprintf("%s%s(%s)收入【“神州”文选】第 %d 篇收入 %s 卷，第 %03d 篇。\n",;                        ctime(time()),me->query("name"),me->query("id"),num+1, fmonth, numb) );;                set("notes", notes);;        } else;                write( sprintf("【“神州”文选】第 %d 篇收编失败。\n", num+1) );;;        return 1;;}
